from random import randint

player = {}
game_map = []
fog = []

MAP_WIDTH = 0
MAP_HEIGHT = 0

TURNS_PER_DAY = 20
WIN_GP = 500

minerals = ['copper', 'silver', 'gold']
mineral_names = {'C': 'copper', 'S': 'silver', 'G': 'gold'}
pickaxe_price = [50, 150]

prices = {}
prices['copper'] = (1, 3)
prices['silver'] = (5, 8)
prices['gold'] = (10, 18)

def load_map(filename, map_struct): #Loads map from file into map_struct

    global MAP_WIDTH
    global MAP_HEIGHT

    temp_map = []

    with open(filename, 'r') as map_file:
        for line in map_file:
            clean_line = ""
            for ch in line:
                if ch != '\n':
                    clean_line += ch
            temp_map.append(list(clean_line))

    map_struct[:] = temp_map

    MAP_WIDTH = len(map_struct[0])
    MAP_HEIGHT = len(map_struct)

def clear_fog(fog, player): #Clears fog around the player's current position at (3x3 grid)

    for dy in [-1, 0, 1]:
        for dx in [-1, 0, 1]:
            y = player['y'] + dy
            x = player['x'] + dx
            if 0 <= y < MAP_HEIGHT and 0 <= x < MAP_WIDTH:
                fog[y][x] = False

def initialize_game(game_map, fog, player): #Sets up game state, map, fog, and initial player stats

    load_map("level1.txt", game_map)
    rows = len(game_map)
    cols = len(game_map[0])
    fog[:] = [[True for _ in range(cols)] for _ in range(rows)]

    name = input("Greetings, miner! What is your name? ").strip()

    player['name'] = name
    player['x'] = 0
    player['y'] = 0
    player['copper'] = 0
    player['silver'] = 0
    player['gold'] = 0
    player['GP'] = 0
    player['day'] = 1
    player['steps'] = 0
    player['turns'] = TURNS_PER_DAY
    player['capacity'] = 10
    player['load'] = 0
    player['pickaxe_level'] = 1
    player['portal'] = (0, 0)

    print(f"Pleased to meet you, {player['name']}. Welcome to Sundrop Town!")
    clear_fog(fog, player)

def draw_map(game_map, fog, player): #Displays the entire map with player, portal, and fog

    print("+" + "-" * MAP_WIDTH + "+")
    for y in range(MAP_HEIGHT):
        print("|", end="")
        for x in range(MAP_WIDTH):
            if (y, x) == (player['y'], player['x']):
                print("M", end="")
            elif 'portal' in player and (y, x) == player['portal']:
                print("P", end="")
            elif fog[y][x]:
                print("?", end="")
            else:
                print(game_map[y][x], end="")
        print("|")
    print("+" + "-" * MAP_WIDTH + "+")

def draw_view(game_map, fog, player): #Shows a 3x3 view centered on the player

    print("+---+")
    for dy in [-1, 0, 1]:
        print("|", end="")
        for dx in [-1, 0, 1]:
            y = player['y'] + dy
            x = player['x'] + dx
            if 0 <= y < MAP_HEIGHT and 0 <= x < MAP_WIDTH:
                if (y, x) == (player['y'], player['x']):
                    print("M", end="")
                elif fog[y][x]:
                    print("?", end="")
                else:
                    print(game_map[y][x], end="")
            else:
                print("#", end="")
        print("|")
    print("+---+")

def show_information(player): # Displays player stats, backpack load, and pickaxe info

    print("\n----- Player Information -----")
    print(f"Name: {player['name']}")

    if 'portal' in player:
        print(f"Portal position: {player['portal']}")
    else:
        print("Portal position: (?, ?)")

    level = player['pickaxe_level']
    level_name = ['copper', 'silver', 'gold'][level - 1]
    print(f"Pickaxe level: {level} ({level_name})")
    print("------------------------------")
    print(f"Load: {player['load']} / {player['capacity']}")
    print("------------------------------")
    print(f"GP: {player['GP']}")
    print(f"Steps taken: {player['steps']}")
    print("------------------------------")

def save_game(game_map, fog, player): #Saves current game map, fog, and player data to files

    with open("save_map.txt", "w") as f:
        for row in game_map:
            line = ""
            for ch in row:
                line += ch
            f.write(line + "\n")

    with open("save_fog.txt", "w") as f:
        for row in fog:
            line = ""
            for cell in row:
                line += '1' if cell else '0'
            f.write(line + "\n")

    with open("save_player.txt", "w") as f:
        for key in player:
            value = player[key]
            f.write(f"{key}:{value}\n")

    print("Game saved successfully!")

def load_game(game_map, fog, player): #Loads saved game state from files into current game variables

    with open("save_map.txt", "r") as f:
        game_map[:] = [list(line.strip()) for line in f]

    with open("save_fog.txt", "r") as f:
        fog[:] = [[cell == '1' for cell in line.strip()] for line in f]

    with open("save_player.txt", "r") as f:
        player.clear() #flag
        for line in f:
            key, value = line.strip().split(":", 1)
            if key in ['x', 'y', 'copper', 'silver', 'gold', 'GP', 'day', 'steps', 'turns', 'capacity', 'load', 'pickaxe_level']:
                player[key] = int(value)
            elif key == 'portal':
                x, y = value.strip("()").split(",")
                player[key] = (int(x), int(y))
            else:
                player[key] = value

    global MAP_WIDTH, MAP_HEIGHT
    MAP_WIDTH = len(game_map[0])
    MAP_HEIGHT = len(game_map)

    print("Game loaded successfully!")

def sell_ore(player): # (New) Sells mined minerals for GP and checks if player meets win condition

    for mineral in minerals:
        qty = player[mineral]
        if qty > 0:
            min_price, max_price = prices[mineral]
            price = randint(min_price, max_price)
            earnings = qty * price
            player['GP'] += earnings
            print(f"You sell {qty} {mineral} ore for {earnings} GP.")
            player[mineral] = 0
    print(f"You now have {player['GP']} GP!")
    if player['GP'] >= WIN_GP:
        print("-------------------------------------------------------------")
        print(f"Woo-hoo! Well done, {player['name']}, you have {player['GP']} GP!")
        print("You now have enough to retire and play video games every day.")
        print(f"And it only took you {player['day']} days and {player['steps']} steps! You win!")
        print("-------------------------------------------------------------")
        return True
    return False

def show_shop_menu(player): # (New) Displays shop options for pickaxe and backpack upgrades

    while True:
        print("\n----------------------- Shop Menu -------------------------")
        # Pickaxe upgrade options
        if player['pickaxe_level'] == 1:
            print("(P)ickaxe upgrade to Level 2 to mine silver ore for 50 GP")
        elif player['pickaxe_level'] == 2:
            print("(P)ickaxe upgrade to Level 3 to mine gold ore for 150 GP")
        else:
            print("Pickaxe is already at max level (Level 3).")

        # Backpack upgrade
        cost = player['capacity'] * 2
        print(f"(B)ackpack upgrade to carry {player['capacity'] + 2} items for {cost} GP")

        print("(L)eave shop")
        print("-----------------------------------------------------------")
        print(f"Your GP: {player['GP']}")
        print("-----------------------------------------------------------")

        choice = input("Your choice? ").strip().upper()

        if choice == 'P':
            level = player['pickaxe_level']
            if level < 3:
                upgrade_cost = pickaxe_price[level - 1]
                if player['GP'] >= upgrade_cost:
                    player['GP'] -= upgrade_cost
                    player['pickaxe_level'] += 1
                    print(f"Pickaxe upgraded to Level {player['pickaxe_level']}!")
                else:
                    print("Not enough GP for pickaxe upgrade.")
            else:
                print("Your pickaxe is already at max level.")

        elif choice == 'B':
            if player['GP'] >= cost:
                player['GP'] -= cost
                player['capacity'] += 2
                print(f"Backpack upgraded! You can now carry {player['capacity']} items.")
            else:
                print("Not enough GP for backpack upgrade.")

        elif choice == 'L':
            print("Leaving the shop...")
            break

        else:
            print("Invalid choice. Please try again.")

def move_player(direction, game_map, fog, player): # (New) Moves player, handles mining, fog clearing, and portal use

    direction_map = {'W': (0, -1), 'S': (0, 1), 'A': (-1, 0), 'D': (1, 0)}
    if direction in direction_map:
        dx, dy = direction_map[direction]
    else:
        dx, dy = (0, 0)

    new_x = player['x'] + dx
    new_y = player['y'] + dy
    if not (0 <= new_x < MAP_WIDTH and 0 <= new_y < MAP_HEIGHT):
        print("You can't go that way.")
        return

    tile = game_map[new_y][new_x]
    if tile in mineral_names:
        if player['load'] >= player['capacity']:
            print("You can't carry any more, so you can't go that way.")
            return
        required_level = {'C': 1, 'S': 2, 'G': 3}[tile]
        if player['pickaxe_level'] < required_level:
            print(f"Your pickaxe isn't strong enough to mine {mineral_names[tile]}.")
            return
        max_pieces = {'C': 5, 'S': 3, 'G': 2}[tile]
        mined = randint(1, max_pieces)
        space_left = player['capacity'] - player['load']
        actual_mined = min(mined, space_left)
        player[mineral_names[tile]] += actual_mined
        player['load'] += actual_mined
        print(f"You mined {mined} piece(s) of {mineral_names[tile]}.")
        if actual_mined < mined:
            print(f"...but you can only carry {actual_mined} more piece(s)!")
        game_map[new_y][new_x] = ' '
    elif tile == 'T':
        print("You stepped on the town portal. Returning to town...")
        use_portal(game_map, fog, player)
        return

    player['x'], player['y'] = new_x, new_y
    clear_fog(fog, player)

def use_portal(game_map, fog, player): # (New) Moves player, handles mining, fog clearing, and portal use

    player['portal'] = (player['y'], player['x'])
    print("You place your portal stone here and zap back to town.")
    won = sell_ore(player)
    player['day'] += 1
    player['turns'] = TURNS_PER_DAY
    player['load'] = 0
    player['x'], player['y'] = 0, 0
    clear_fog(fog, player)
    if won:
        return 'main'

def mine_menu(game_map, fog, player): # (New) Handles mining gameplay loop, user movement, and in-mine actions

    # Teleport to previous day's location
    if 'portal' in player:
        portal_location = player['portal']
        if portal_location != (0, 0):
            print(f"Teleporting to previous location at {portal_location}")
            player['y'], player['x'] = portal_location
            clear_fog(fog, player)

    while player['turns'] > 0:
        print("\n---------------------------------------------------")
        print(f"{'DAY ' + str(player['day']):^51}")
        print("---------------------------------------------------")
        print(f"DAY {player['day']}")
        draw_view(game_map, fog, player)
        print(f"Turns left: {player['turns']}     Load: {player['load']} / {player['capacity']}     Steps: {player['steps']}")
        print("(WASD) to move")
        print("(M)ap, (I)nformation, (P)ortal, (Q)uit to main menu")
        action = input("Action? ").strip().upper()
        print("-------------------------------------------------------------")

        if action in ['W', 'A', 'S', 'D']:
            move_player(action, game_map, fog, player)
            player['steps'] += 1
            player['turns'] -= 1
        elif action == 'M':
            draw_map(game_map, fog, player)
        elif action == 'I':
            show_information(player)
        elif action == 'P':
            return use_portal(game_map, fog, player) or 'town'
        elif action == 'Q':
            print("Returning to main menu...")
            return 'main'
        else:
            print("Invalid input.")

    print("You are exhausted.")
    return use_portal(game_map, fog, player) or 'town'

def show_main_menu(): #Displays the main menu options for starting, loading, or quitting

    print()
    print("--- Main Menu ----")
    print("(N)ew game")
    print("(L)oad saved game")
#    print("(H)igh scores")
    print("(Q)uit")
    print("------------------")

def show_town_menu(): #Shows available activities in Sundrop Town (shop, info, enter mine, save, quit)

    print()
    # TODO: Show Day
    print(f"DAY {player['day']}")
    print("----- Sundrop Town -----")
    print("(B)uy stuff")
    print("See Player (I)nformation")
    print("See Mine (M)ap")
    print("(E)nter mine")
    print("Sa(V)e game")
    print("(Q)uit to main menu")
    print("------------------------")
            

#--------------------------- MAIN GAME ---------------------------
game_state = 'main'
print("---------------- Welcome to Sundrop Caves! ----------------")
print("You spent all your money to get the deed to a mine, a small")
print("  backpack, a simple pickaxe and a magical portal stone.")
print()
print("How quickly can you get the 1000 GP you need to retire")
print("  and live happily ever after?")
print("-----------------------------------------------------------")

# TODO: The game!
    
while True:
    if game_state == 'main':
        show_main_menu()
        choice = input("Your choice? ").strip().upper()
        if choice.upper() == 'N':
            initialize_game(game_map, fog, player)
            game_state = 'town' 
            
        elif choice.upper() == 'L':
            load_game(game_map, fog, player)
            game_state = 'town'
    
        elif choice.upper() == 'Q':
            print("Thanks for playing Sundrop Caves! Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

    elif game_state == 'town':
        show_town_menu()
        choice = input("Your choice? ").strip().upper()
        if choice.upper() == 'B':
            game_state = 'shop'
        elif choice.upper() == 'I':
            show_information(player)
        elif choice.upper() == 'M':
            draw_map(game_map, fog, player)
        elif choice.upper() == 'E':
            if 'portal' in player:
                player['x'], player['y'] = player['portal']
            else:
                player['x'], player['y'] = (0, 0)
            game_state = 'mine'
        elif choice.upper() == 'V':
            save_game(game_map, fog, player)
        elif choice.upper() == 'Q':
            game_state = 'main'
        else:
            print("Invalid choice. Please try again.")
    
    elif game_state == 'shop':
        show_shop_menu(player)
        game_state = 'town'
    elif game_state == 'mine':
        game_state = mine_menu(game_map, fog, player)